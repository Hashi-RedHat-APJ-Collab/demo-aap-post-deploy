---
# Playbook: ServiceNow Developer Instance Provisioning
# Description: Automates the provisioning of ServiceNow developer instances
# Author: Ansible Automation Platform
# Date: June 16, 2025
#
# Job Template Survey Configuration:
# - Variable: servicenow_dev_username
#   Type: Text
#   Question: ServiceNow Developer Portal Username
#   Required: Yes
#
# - Variable: servicenow_dev_password
#   Type: Password
#   Question: ServiceNow Developer Portal Password
#   Required: Yes
#
# - Variable: instance_name
#   Type: Text
#   Question: Instance Name (optional)
#   Required: No
#   Default: [auto-generated]
#
# - Variable: poll_interval
#   Type: Integer
#   Question: Poll Interval in seconds
#   Required: No
#   Default: 60
#
# - Variable: timeout
#   Type: Integer
#   Question: Maximum Timeout in seconds
#   Required: No
#   Default: 1800
#   Note: This variable is internally renamed to max_timeout to avoid Ansible reserved name conflicts

- name: Provision ServiceNow Developer Instance
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    # Required variables - configured via job template survey
    servicenow_dev_username: "{{ servicenow_dev_username }}"
    servicenow_dev_password: "{{ servicenow_dev_password }}"
    # Optional variables with defaults - configurable via job template survey
    instance_name: "{{ instance_name | default('dev' + lookup('pipe', 'date +%Y%m%d%H%M%S')) }}"
    poll_interval: "{{ poll_interval | default(60) | int }}"
    max_timeout: "{{ timeout | default(1800) | int }}"  # 30 minutes in seconds
    # Internal variables
    developer_portal_url: "https://developer.servicenow.com"
    api_base_url: "https://developer.servicenow.com/api/now/devportal"
    auth_cookie: ""
    instance_request_id: ""
    start_time: ""
    
  tasks:
    - name: Set start time
      ansible.builtin.set_fact:
        start_time: "{{ lookup('pipe', 'date +%s') }}"
    
    - name: Get ServiceNow Developer Portal login page
      ansible.builtin.uri:
        url: "{{ developer_portal_url }}/login"
        method: GET
        follow_redirects: true
        status_code: [200, 302]
        return_content: true
      register: login_page
      failed_when: false
      
    - name: Debug login page response
      ansible.builtin.debug:
        var: login_page
      failed_when: false
      
    - name: Extract CSRF token from login page
      ansible.builtin.set_fact:
        csrf_token: "{{ login_page.content | default('') | regex_search('name=\"csrf_token\" value=\"([^\"]+)\"', '\\1') | default('') }}"
      failed_when: false
      
    - name: Log in to ServiceNow Developer Portal
      ansible.builtin.uri:
        url: "{{ developer_portal_url }}/app/dt/api/user/session"
        method: POST
        body_format: json
        body:
          email: "{{ servicenow_dev_username }}"
          password: "{{ servicenow_dev_password }}"
          csrf_token: "{{ csrf_token }}"
        status_code: [200, 302]
        headers:
          Content-Type: "application/json"
          Referer: "{{ developer_portal_url }}/login"
        follow_redirects: true
      register: login_response
      ignore_errors: true
      
    - name: Try alternate login approach if first attempt failed
      ansible.builtin.uri:
        url: "{{ developer_portal_url }}/login.do"
        method: POST
        body_format: form-urlencoded
        body:
          username: "{{ servicenow_dev_username }}"
          password: "{{ servicenow_dev_password }}"
          remember_me: "true"
        status_code: [200, 302]
        headers:
          Content-Type: "application/x-www-form-urlencoded"
        follow_redirects: true
      register: alt_login_response
      when: login_response.status is not defined or login_response.status not in [200, 302]
      
    - name: Set active login response
      ansible.builtin.set_fact:
        active_login: "{% if alt_login_response is defined and alt_login_response.skipped is not defined %}{{ alt_login_response }}{% else %}{{ login_response }}{% endif %}"
      
    - name: Store authentication cookie
      ansible.builtin.set_fact:
        auth_cookie: "{{ active_login.cookies_string | default('') }}"
        
    - name: Set user token variable
      ansible.builtin.set_fact:
        user_token: "{{ active_login.json.result.userToken | default('') }}"
      when: active_login.json is defined and active_login.json.result is defined
      
    - name: Set empty user token if not available
      ansible.builtin.set_fact:
        user_token: ""
      when: user_token is not defined
    - name: Check if user already has instances
      ansible.builtin.uri:
        url: "{{ api_base_url }}/instances"
        method: GET
        headers:
          Cookie: "{{ auth_cookie }}"
          X-UserToken: "{{ user_token }}"
        status_code: [200, 401, 403]
        follow_redirects: true
      register: existing_instances
      failed_when: false
      
    - name: Fail if authentication failed
      ansible.builtin.fail:
        msg: "Failed to authenticate with ServiceNow Developer Portal. Please check your credentials and try again."
      when: existing_instances.status == 401 or existing_instances.status == 403
    
    - name: Display existing instances
      ansible.builtin.debug:
        msg: "Found {{ existing_instances.json.result | default([]) | length }} existing instance(s)"
    - name: Request new ServiceNow developer instance
      ansible.builtin.uri:
        url: "{{ api_base_url }}/instance"
        method: POST
        headers:
          Cookie: "{{ auth_cookie }}"
          Content-Type: "application/json"
          X-UserToken: >-
            {% if active_login.json is defined and 
            active_login.json.result is defined and 
            active_login.json.result.userToken is defined %}
            {{ active_login.json.result.userToken }}
            {% else %}{% endif %}
          Referer: "{{ developer_portal_url }}/dev-program/dashboard"
        body_format: json
        body:
          name: "{{ instance_name }}"
          purpose: "Automated provisioning via Ansible"
          version: "latest"
        status_code: [200, 201, 202]
        follow_redirects: true
      register: instance_request
      failed_when: (instance_request.status not in [200, 201, 202]) or (instance_request.json.result is not defined)
    - name: Store instance request ID
      ansible.builtin.set_fact:
        instance_request_id: "{{ instance_request.json.result.id }}"
    - name: Display instance request ID
      ansible.builtin.debug:
        msg: "Instance request ID: {{ instance_request_id }}"
    - name: Poll for instance provisioning completion
      ansible.builtin.uri:
        url: "{{ api_base_url }}/instance/{{ instance_request_id }}"
        method: GET
        headers:
          Cookie: "{{ auth_cookie }}"
          X-UserToken: >-
            {% if active_login.json is defined and 
            active_login.json.result is defined and 
            active_login.json.result.userToken is defined %}
            {{ active_login.json.result.userToken }}
            {% else %}{% endif %}
          Referer: "{{ developer_portal_url }}/dev-program/dashboard"
        status_code: [200, 404]
        follow_redirects: true
      register: instance_status
      until: >
        (instance_status.status == 200 and
        (instance_status.json.result.status == 'provisioned' or
        instance_status.json.result.status == 'ready' or
        instance_status.json.result.status == 'error')) or
        (lookup('pipe', 'date +%s') | int) - (start_time | int) > max_timeout
      retries: "{{ (max_timeout / poll_interval) | int }}"
      delay: "{{ poll_interval }}"
      failed_when: false
    - name: Fail if instance provisioning timed out
      ansible.builtin.debug:
        msg: "Instance provisioning timed out or failed after {{ max_timeout }} seconds"
      when: >
        instance_status.status != 200 or
        instance_status.json is not defined or
        instance_status.json.result is not defined or
        instance_status.json.result.status is not defined or
        (instance_status.json.result.status != 'provisioned' and
        instance_status.json.result.status != 'ready')
        
    - name: Fail if instance provisioning failed with error status
      ansible.builtin.fail:
        msg: "Instance provisioning failed with status: {{ instance_status.json.result.status }}"
      when: >
        instance_status.status == 200 and
        instance_status.json is defined and
        instance_status.json.result is defined and
        instance_status.json.result.status is defined and
        instance_status.json.result.status == 'error'
    - name: Get instance details
      ansible.builtin.uri:
        url: "{{ api_base_url }}/instance/{{ instance_request_id }}"
        method: GET
        headers:
          Cookie: "{{ auth_cookie }}"
          X-UserToken: >-
            {% if active_login.json is defined and
            active_login.json.result is defined and
            active_login.json.result.userToken is defined %}
            {{ active_login.json.result.userToken }}
            {% else %}{% endif %}
          Referer: "{{ developer_portal_url }}/dev-program/dashboard"
        status_code: 200
        follow_redirects: true
      register: instance_details
    - name: Validate instance accessibility
      ansible.builtin.uri:
        url: "https://{{ instance_details.json.result.url }}"
        method: GET
        status_code: 200
      register: instance_access
      ignore_errors: true
    - name: Calculate provisioning time
      ansible.builtin.set_fact:
        provisioning_time: "{{ (lookup('pipe', 'date +%s') | int) - (start_time | int) }}"
    - name: Display instance details
      ansible.builtin.debug:
        msg:
          - "Instance provisioning completed successfully!"
          - "Instance URL: https://{{ instance_details.json.result.url }}"
          - "Username: {{ instance_details.json.result.username }}"
          - "Password: {{ instance_details.json.result.password }}"
          - "Instance Name: {{ instance_details.json.result.name }}"
          - "Status: {{ instance_details.json.result.status }}"
          - "Provisioning Time: {{ provisioning_time }} seconds"
    - name: Set instance details as facts
      ansible.builtin.set_fact:
        snow_instance_url: "https://{{ instance_details.json.result.url }}"
        snow_instance_username: "{{ instance_details.json.result.username }}"
        snow_instance_password: "{{ instance_details.json.result.password }}"
        snow_instance_name: "{{ instance_details.json.result.name }}"
        snow_instance_status: "{{ instance_details.json.result.status }}"
        snow_provisioning_time: "{{ provisioning_time }}"
    - name: Output instance details
      ansible.builtin.debug:
        msg: |
          # ServiceNow Developer Instance Details
          ## Connection Information
          - URL: https://{{ instance_details.json.result.url }}
          - Username: {{ instance_details.json.result.username }}
          - Password: {{ instance_details.json.result.password }}
          ## Instance Information
          - Name: {{ instance_details.json.result.name }}
          - Status: {{ instance_details.json.result.status }}
          - Version: {{ instance_details.json.result.version | default('latest') }}
          ## Provisioning Information
          - Request ID: {{ instance_request_id }}
          - Provisioning Time: {{ provisioning_time }} seconds
          - Accessibility Check: {{ 'Successful' if instance_access.status == 200 else 'Failed' }}
          ## Notes
          - Instance will automatically hibernate after period of inactivity
          - Access the ServiceNow Developer Portal to manage your instances: https://developer.servicenow.com
